{"version":3,"sources":["QuoteBox.js","Buttons.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","quote","author","className","icon","faQuoteLeft","Buttons","click","href","style","faTwitter","faTumblr","type","onClick","App","handleClick","forceUpdate","state","quotes","fetch","then","res","json","setState","console","log","this","length","i","Math","floor","random","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oSAceA,EATE,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACzB,OACC,6BACC,wBAAIC,UAAU,cAAa,kBAAC,IAAD,CAAiBC,KAAMC,MAAlD,IAAmEJ,GACnE,uBAAGE,UAAU,MAAb,KAAqBD,K,eCYTI,EAfC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACjB,OACC,yBAAKJ,UAAU,WACd,uBAAGK,KAAK,IAAIC,MAAO,CAAC,mBAAoB,UAAW,MAAS,UAC3D,kBAAC,IAAD,CAAiBL,KAAMM,OAExB,uBAAGF,KAAK,IAAIC,MAAO,CAAC,mBAAoB,UAAW,MAAS,UAC3D,kBAAC,IAAD,CAAkBL,KAAMO,OAGzB,4BAAQC,KAAK,SAASC,QAASN,GAA/B,eCgCYO,G,wDAxCd,aAAe,IAAD,8BACb,gBAeDC,YAAc,WACb,EAAKC,eAfL,EAAKC,MAAQ,CACZC,OAAQ,IAHI,E,gEAOO,IAAD,OACnBC,MAAM,0IACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GACL,EAAKK,SAAS,CAACL,OAAQA,EAAOA,SAC9BM,QAAQC,IAAI,EAAKR,MAAMC,a,+BASzB,GAAgC,IAA7BQ,KAAKT,MAAMC,OAAOS,OACpB,OACC,yBAAKxB,UAAU,qCACZ,wBAAIA,UAAU,cAAd,WACA,kBAAC,EAAD,OAIJ,IAAMyB,EAAIC,KAAKC,MAAMD,KAAKE,SAAYL,KAAKT,MAAMC,OAAOS,QACvD,OACA,yBAAKxB,UAAU,qCACZ,kBAAC,EAAD,CAAUF,MAAOyB,KAAKT,MAAMC,OAAOU,GAAG3B,MAAOC,OAAQwB,KAAKT,MAAMC,OAAOU,GAAG1B,SAC1E,kBAAC,EAAD,CAASK,MAAOmB,KAAKX,mB,GAlCViB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.f0e1f032.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons';\r\nimport { faQuoteLeft} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst QuoteBox = ({quote, author}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<h1 className='mt0 tc fw7'><FontAwesomeIcon icon={faQuoteLeft} /> {quote}</h1>\r\n\t\t\t<p className='tr'>- {author}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default QuoteBox;","import React, { Component } from 'react';\r\nimport './Buttons.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faTumblr} from '@fortawesome/free-brands-svg-icons';\r\n\r\n\r\nconst Buttons = ({click}) => {\r\n\treturn (\r\n\t\t<div className=\"dif pt3\">\r\n\t\t\t<a href='#' style={{'background-color': '#AA3939', 'color': 'white'}}>\r\n\t\t\t\t<FontAwesomeIcon icon={faTwitter} />\r\n\t\t\t</a>\r\n\t\t\t<a href='#' style={{'background-color': '#AA3939', 'color': 'white'}}>\r\n\t\t\t\t<FontAwesomeIcon  icon={faTumblr} \r\n\t\t\t\t/>\r\n\t\t\t</a>\r\n\t\t\t<button type='button' onClick={click}>New Quote</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Buttons","import React, { Component } from 'react';\r\nimport QuoteBox from './QuoteBox'\r\nimport Buttons from './Buttons'\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tquotes: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(quotes => {\r\n\t\t\t\tthis.setState({quotes: quotes.quotes})\r\n\t\t\t\tconsole.log(this.state.quotes)\r\n\t\t\t});\r\n\t}\r\n\r\n\thandleClick = () => {\r\n\t\tthis.forceUpdate();\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.quotes.length === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"dib border-box bg-white container\">\r\n\t\t  \t\t\t<h1 className='mt0 tc fw7'>Loading</h1>\r\n\t\t  \t\t\t<Buttons />\r\n\t\t\t\t</div>\r\n\t  \t\t);\r\n\t\t} else {\r\n\t\t\tconst i = Math.floor(Math.random() * (this.state.quotes.length))\r\n\t \t\treturn (\r\n\t\t\t\t<div className=\"dib border-box bg-white container\">\r\n\t\t  \t\t\t<QuoteBox quote={this.state.quotes[i].quote} author={this.state.quotes[i].author} />\r\n\t\t  \t\t\t<Buttons click={this.handleClick} />\r\n\t\t\t\t</div>\r\n\t  \t\t);\r\n\t  \t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}